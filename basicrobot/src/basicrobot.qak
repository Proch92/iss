/*
 * This is a textual representation a model expressed using the Qak language (metamodel)
 * that describes the structure, interaction, behaviour of the software system
 * according to the requirements
 */

System basicrobot  

Dispatch cmd          : cmd(X) // X = w | s | a ... 
Event  obstacle  : obstacle( DISTANCE )
Event  alarm     : alarm(V) 

Context ctxBasicRobot   ip [ host= "localhost"   port= 8020 ]

CodedQActor robotadapter context ctxBasicRobot className "itunibo.robot.robotAdapterQa"

QActor basicrobot context ctxBasicRobot { 
	State s0 initial {
		println("init")
	}
	Goto idle

	State idle{	println ( "robot waiting" ) 		
	}	
	Transition t0
		whenMsg   cmd        -> handleCmd
		whenEvent obstacle -> handleObstacle 
 	 
	State handleCmd{ 
 		printCurrentMessage
		onMsg ( cmd : cmd(X) ) { 
			forward robotadapter -m cmd : cmd($payloadArg(0))
		}
 	}
 	Goto idle
 	
	State handleObstacle{
		printCurrentMessage
		forward robotadapter -m cmd : cmd(h)
	}
	Goto idle
}

/*
 * The actor sentinel is sensible to alarm events emitted by the external world
 */
 QActor sentinel context ctxBasicRobot{
	State s0 initial{ 
		println("sentinel start")
	}
	Transition t0 
		whenEvent alarm -> handleAlarm
 	
	State handleAlarm{
		printCurrentMessage
		println("sentinel handleAlarm ")
	}
 	Transition t0 
		whenEvent alarm -> handleAlarm
 }

