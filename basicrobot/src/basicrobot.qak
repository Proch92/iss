/*
 * This is a textual representation a model expressed using the Qak language (metamodel)
 * that describes the structure, interaction, behaviour of the software system
 * according to the requirements
 */
 
System basicrobot  

Dispatch cmd      : cmd(X)					//sent by external interface
Event  userCmd    : userCmd(X)				//generated by (web) user interface
Event  obstacle   : obstacle( DISTANCE )	//generated by sonaractorfilter.kt
Event  alarm      : alarm( V )   			//generated by the external world
Event  sonarRobot : sonar( D )				//NOT generated (at the moment) since sonaractorfilter
Event  polar      : polar( D,Angle)			//generated by sonarforradar

Dispatch remove	  : remove(NAME)
Event remove	  : remove(NAME)

Context ctxBasicRobot   ip [ host= "172.0.0.1"   port= 8030 ]

CodedQActor robotadapter context ctxBasicRobot className "itunibo.robot.robotAdapterQaStream"

QActor robot context ctxBasicRobot { 
	State s0 initial {
		println("init")
	}
	Goto idle

	State idle{	println ( "robot waiting" ) 		
	}	
	Transition t0
		whenMsg   cmd        -> handleCmd
		whenEvent obstacle -> handleObstacle
		whenEvent remove -> handeRemove 
 	 
	State handleCmd{ 
 		printCurrentMessage
		onMsg ( cmd : cmd(X) ) { 
			forward robotadapter -m cmd : cmd($payloadArg(0))
		}
 	}
 	Goto idle
 	
 	State handeRemove{ 
		onMsg ( remove : remove(NAME) ) { 
			forward robotadapter -m remove : remove($payloadArg(0))
		}
 	}
 	Goto idle
 	
	State handleObstacle{
		printCurrentMessage
		//forward robotadapter -m cmd : cmd(s)
		//delay 200
		//forward robotadapter -m cmd : cmd(h)
	}
	Goto idle
}

