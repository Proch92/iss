/* Generated by AN DISI Unibo */ 
package it.unibo.detector

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Detector ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "init"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("detector | init")
					}
					 transition( edgeName="goto",targetState="think", cond=doswitch() )
				}	 
				state("think") { //this:State
					action { //it:State
						println("detector | think")
					}
					 transition( edgeName="goto",targetState="discharge", cond=doswitchGuarded({isRobotFull}) )
					transition( edgeName="goto",targetState="searchNext", cond=doswitchGuarded({! isRobotFull}) )
				}	 
				state("discharge") { //this:State
					action { //it:State
						println("detector | discharge")
					}
					 transition( edgeName="goto",targetState="think", cond=doswitch() )
				}	 
				state("searchNext") { //this:State
					action { //it:State
						println("detector | searchNext")
					}
					 transition( edgeName="goto",targetState="think", cond=doswitch() )
				}	 
			}
		}
}
