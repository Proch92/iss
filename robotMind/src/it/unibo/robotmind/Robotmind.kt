/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var StepTime = 0L;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("init")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("idle")
						var loopCounter = 0;
					}
					 transition(edgeName="tWork0",targetState="sStep",cond=whenDispatch("step"))
					transition(edgeName="tWork1",targetState="sHandleCmd",cond=whenDispatch("cmd"))
					transition(edgeName="tWork2",targetState="sLoop",cond=whenDispatch("loop"))
				}	 
				state("sHandleCmd") { //this:State
					action { //it:State
						println("sHandleCmd")
						if( checkMsgContent( Term.createTerm("cmd(X)"), Term.createTerm("cmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("cmd", "cmd(${payloadArg(0)})" ,"basicrobot" ) 
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("sStep") { //this:State
					action { //it:State
						println("sStep")
						if( checkMsgContent( Term.createTerm("step(T)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								StepTime = payloadArg(0).toLong()
								forward("cmd", "cmd(w)" ,"basicrobot" ) 
						}
						stateTimer = TimerActor("timer_sStep", 
							scope, context!!, "local_tout_robotmind_sStep", StepTime )
					}
					 transition(edgeName="tStop3",targetState="sEndStep",cond=whenTimeout("local_tout_robotmind_sStep"))   
					transition(edgeName="tStop4",targetState="sEndStep",cond=whenDispatch("stop"))
				}	 
				state("sEndStep") { //this:State
					action { //it:State
						println("sEndStep")
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("sLoop") { //this:State
					action { //it:State
						println("sLoop")
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
					}
					 transition(edgeName="tLoop5",targetState="sObstacleLoop",cond=whenEvent("obstacle"))
				}	 
				state("sObstacleLoop") { //this:State
					action { //it:State
						println("sObstacleLoop")
						loopCounter += 1;
						forward("cmd", "cmd(a)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="sLoop", cond=doswitch() )
				}	 
			}
		}
}
