/* Generated by AN DISI Unibo */ 
package it.unibo.tvocsentinel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tvocsentinel ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "idle"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("idle") { //this:State
					action { //it:State
					}
					 transition(edgeName="t01",targetState="checkLevel",cond=whenEvent("tvoc"))
				}	 
				state("checkLevel") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tvoc(PPM)"), Term.createTerm("tvoc(PPM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val tvocHigh = (payloadArg(0).toInt() > 500)
								if((tvocHigh)){ forward("suspend", "suspend(X)" ,"detector" ) 
								 }
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
