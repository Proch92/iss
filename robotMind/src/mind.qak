/*
 * This is a textual representation a model expressed using the Qak language (metamodel)
 * that describes the structure, interaction, behaviour of the software system
 * according to the requirements
 */

System robotmind

Dispatch step	: step(T)  // req-step
Dispatch stop	: stop(X)  // req-stop
Dispatch cmd 	: cmd(X)   // req-cmd
Dispatch loop	: loop(X)
Event  obstacle  : obstacle(DISTANCE)
Event  alarm     : alarm(V) 

Context ctxMind	ip [ host= "localhost"   port= 8023 ]
Context ctxBasicRobot  ip [ host= "localhost"   port= 8020 ]

ExternalQActor basicrobot context ctxBasicRobot 

QActor robotmind context ctxMind {
	["var StepTime = 0L;"]
    ["var start = 0L;"]
	["var elapsed = 0L;"]
	["var loopCounter = 0;"]

	State s0 initial {
		println("init")
	}
	Goto idle

	State idle {
		println("idle")
	}
	Transition tWork
		whenMsg step -> sStep
		whenMsg cmd -> sHandleCmd
		whenMsg loop -> sLoop

	/*
	 * REQUIREMENT: req-cmd
	 */
	State sHandleCmd {
		println("sHandleCmd")
		onMsg (cmd : cmd(X)) {
			forward basicrobot -m cmd : cmd($payloadArg(0))
		}
	}
	Goto idle

	/*
	 * REQUIREMENT: req-step
	 */
	State sStep {
		println("sStep")
		onMsg (step : step(T)){
			["StepTime = payloadArg(0).toLong()"]
			forward basicrobot -m cmd : cmd(w)
		}
	}
	Transition tStop
		whenTimeVar StepTime -> sEndStep
		whenMsg stop -> sEndStep

	/*
	 * REQUIREMENT: req-stop
	 */
	State sEndStep {
		println("sEndStep")
		forward basicrobot -m cmd : cmd(h)
	}
	Goto idle
	
	/*
	 * LOOP
	 */
	State sLoop {
		println("sLoop")
		["start = System.currentTimeMillis();"] // start the chronometer
		forward basicrobot -m cmd : cmd(w)
	}
	Transition tLoop
		whenEvent obstacle and "loopCounter < 3" -> sObstacleLoop
		whenEvent obstacle and "loopCounter == 3" -> sEndLoop
	
	State sObstacleLoop {
		println("sObstacleLoop")
        ["val runtime = System.currentTimeMillis() - start;"] // stop the chronometer
        ["elapsed += runtime;"]
		["loopCounter += 1;"]
		forward basicrobot -m cmd : cmd(a)
	}
	Goto sLoop

	State sEndLoop {
		println("sEndLoop")
		["loopCounter = 0;"]
		["elapsed = 0L;"]
        ["val perimeter = elapsed * 0.2;"] // stop the chronometer
        println("elapsed time: ${elapsed}")
        println("perimeter: ${perimeter} meters")
		forward basicrobot -m cmd : cmd(a)
	}
	Goto idle
}
