/*
 * This is a textual representation a model expressed using the Qak language (metamodel)
 * that describes the structure, interaction, behaviour of the software system
 * according to the requirements
 */

System robotmind

mqttBroker "localhost" : 1884

Dispatch step	: step(DURATION)
Request step	: step(DURATION)
Reply stepdone	: stepdone(V)
Reply stepfail	: stepfail(DURATION, CAUSE)
Event stepdone	: stepdone(V)
Event stepfail	: stepfail(DURATION, CAUSE)
Dispatch stop	: stop(X)
Dispatch cmd	: cmd(X)
Dispatch suspend: suspend(X)
Dispatch explore: explore(X)
Dispatch wakeup	: wakeup(X)
Event obstacle	: obstacle(DISTANCE)
Event tvocHigh	: tvocHigh(VALUE)
Event tvocLow	: tvocLow(VALUE)
Dispatch unload	: unload(NBOTTLES)
Request canDump	: canDump(NBOTTLES)
Reply dumpAccept: dumpAccept(X)
Reply dumpFull	: dumpFull(X)
Event boxCannotAccept : boxCannotAccept(X)

Event itsPlastic : itsPlastic(X)
Event itsObstacle : itsObstacle(X)

Context ctxMind			ip [ host= "192.168.1.92"	port= 8020 ] +mqtt
// Context ctxBasicRobot	ip [ host= "192.168.1.117"	port= 8030 ]
Context ctxBasicRobot	ip [ host= "127.0.0.1"	port= 8030 ]

ExternalQActor robot context ctxBasicRobot 

QActor robotmind context ctxMind {
	["
	var StepTime = 500L 
	var Duration = 0L
	var WithResource = true
	var DoStepAnswer = false
	"]
	State s0 initial {
		println("robotmind | init")
	}
	Goto idle

	State idle {
		println("robotmind | idle")
		["myai.RobotState.print()"]
	}
	Transition tWork
		whenMsg step		-> doStepNoAnswer
		whenRequest step	-> doStepWithAnswer
		whenMsg cmd			-> sHandleCmd
		whenMsg stop		-> sHandleStopUnexpected
	
	State sHandleStopUnexpected {
		println("robotmind | sHandleStopUnexpected - not expecting stop command outside of step context")
	}
	Goto idle

	State sHandleCmd {
		onMsg( cmd : cmd(X) ){ 
			["
			var Move = payloadArg(0)
			println(\"robotmind | received $Move\")
			myai.RobotState.update(Move)
			"]
			forward robot -m cmd : cmd( $Move )
			if "( WithResource )" {
				run kotlincode.coapSupport.updateResource(myself, "robot/pos", "u$Move")
			}
		}
	}
	Goto idle

	// ----------------- STEP ------------------

	State doStepNoAnswer {    
    	onMsg(step : step(T)){
    		["
				StepTime = payloadArg(0).toLong();
				DoStepAnswer = false
			"]
    	}
    } Goto doStep

    State doStepWithAnswer {  
    	onMsg(step : step(T)){
    		["
				StepTime = payloadArg(0).toLong();
				DoStepAnswer = true
			"]
    	}
    } Goto doStep
     
	State doStep{
 		println("robotmind | doStep StepTime = $StepTime")
 		["startTimer()"]
		forward robot -m cmd : cmd(w)
 	}
	Transition t0
		whenTimeVar StepTime  -> endStep
		whenMsg stop          -> stepStop
		whenEvent obstacle    -> stepFail
 	
	State endStep{
		["myai.RobotState.update(\"step\")"]
		forward robot -m cmd : cmd( h )
		println("robotmind | step DONE")
		if "WithResource" { run kotlincode.coapSupport.updateResource(myself, "robot/pos", "up") }
		if "DoStepAnswer" { replyTo step with stepdone : stepdone(ok) }
		emit stepdone : stepdone(ok)
  	}
	Goto idle

	State stepStop{
		["Duration = getDuration().toLong()"]
		forward robot -m cmd : cmd( h )
		println("robotmind | stepStop Duration=$Duration")
		if "DoStepAnswer" { replyTo step with stepfail : stepfail($Duration, stopped) }
		emit stepfail : stepfail($Duration, stopped)
 	}
	Goto revertStep  	 

	State stepFail{
		["Duration = getDuration().toLong()"]
		println("robotmind | stepFail Duration=$Duration ")
		if "DoStepAnswer" { replyTo step with stepfail : stepfail($Duration, obstacle) }
		emit stepfail : stepfail($Duration, obstacle)
  	}
	Goto revertStep
	
	State revertStep {
		println("robotmind | revertStep")
		forward robot -m cmd : cmd(s)
	}
	Transition trevert
		whenTimeVar Duration -> stopRevert
	
	State stopRevert {
		println("robotmind | stopRevert")
		forward robot -m cmd : cmd(h)
	}
	Goto idle
}

QActor detector context ctxMind {
	["
	val WithResource = true
	val MaxTrash = 2
	var CurrentTrash = 0
	val room = myai.Room()
	val dfs = myai.DFSUtil(room)
	val planner = myai.Planner(room)
	val StepDuration = 500
	var Goal : Pair<Int, Int> = Pair(0, 0)
	var Suspended = false
	"]
	State init initial {
		println("detector | init")
		["
		dfs.movedOn(Pair(0, 0))
		room.print()
		"]
	}
	Goto activateResource  if "WithResource" else idle
	
	State activateResource{
		run kotlincode.resServer.init(myself)
		run kotlincode.coapSupport.init("coap://localhost:5683")
		delay 1000 
		run kotlincode.resourceObserver.init("coap://localhost:5683","robot/pos")
	}
	Goto idle
	
	State idle {
		println("detector | idle")
		["
		if (WithResource) room.coapPublish(myself)
		room.print()
		"]
	}
	Transition t0
		whenMsg explore -> explore
	
	State sleep {
		println("detector | sleep")
	}
	Transition tsleep
		whenMsg wakeup -> idle

	State discharge {
		println("detector | discharge")
		request plasticbox -m canDump : canDump($CurrentTrash)
	}
	Transition twaitAccept
		whenReply dumpAccept -> goHome
		whenReply dumpFull -> notifyDumpFull

	State notifyDumpFull {
		println("detector | notifyDumpFull")
		emit boxCannotAccept : boxCannotAccept(X)
	}
	Goto idle
	
	State goHome {
		println("detector | goHome")
		["
		Goal = Pair(0, 0)
		planner.new_plan(Goal)
		planner.executePlan(myself)
		"]
	}
	Goto waitPlanCompletion
	
	State ssuspend {
		println("detector | ssuspend")
		["Suspended = true"]
		if "(WithResource)" {run kotlincode.coapSupport.updateResource(myself, "robot/status", "status(suspended)")}
	}
	Goto goHome
	
	State explore {
		println("detector | explore")
		["
		Suspended = false
		Goal = dfs.next()
		println(Goal)
		planner.new_plan(Goal)
		planner.executePlan(myself)
		room.print()
		"]
		if "(WithResource)" {run kotlincode.coapSupport.updateResource(myself, "robot/status", "status(active)")}
	}
	Goto waitPlanCompletion
	
	State waitPlanCompletion {
		println("detector | waitPlanCompletion")
	}
	Transition twait
		whenEvent stepdone -> checkGoal
		whenEvent stepfail -> askObstacle
		whenMsg suspend	-> ssuspend
	
	State checkGoal {
		println("detector | checkGoal")
		["
		val cur_x = myai.RobotState.x
		val cur_y = myai.RobotState.y
		dfs.movedOn(Pair(cur_x, cur_y))
		room.print()
		if (WithResource) room.coapPublish(myself)
		"]
	}
	Goto goalAchieved if "(Pair(myai.RobotState.x, myai.RobotState.y) == Goal)" else waitPlanCompletion
	
	State goalAchieved {
		println("detector | goalAchieved")
		if "(Goal == Pair(0, 0))" {
			forward plasticbox -m unload : unload($CurrentTrash)
			["CurrentTrash = 0"]
		}
	}
	Goto explore if "(Suspended == false)" else sleep
	
	State askObstacle {
		println("detector | askObstalce")
		// ask if plastic bottle or obstacle
	}
	Transition task
		whenEvent itsPlastic -> plasticFound
		whenEvent itsObstacle -> obstacleFound
		whenMsg suspend	-> ssuspend
	
	State plasticFound {
		println("detector | plasticFound")
		["CurrentTrash += 1"]
	}
	Goto discharge if "(MaxTrash == CurrentTrash)" else explore
	
	State obstacleFound {
		println("detector | obstacleFound")
		["
		val (gx, gy) = Goal
		room.put(gx, gy, myai.Type.OBSTACLE)
		"]
	}
	Goto explore
}

QActor tvocsentinel context ctxMind {
	State init initial {}
	Goto idle 
	
	State idle{}
	Transition t0
		whenEvent tvocHigh	->	suspendRobot
		whenEvent tvocLow	->	wakeupRobot
	
	State suspendRobot {
		forward detector -m suspend : suspend(X)
	}
	Goto idle
	
	State wakeupRobot {
		forward detector -m wakeup : wakeup(X)
	}
	Goto idle
}

QActor plasticbox context ctxMind {
	["
	val NPB=10
	var bottles=0
	var acceptDump = true
	val WithResource = true
	"]
	State init initial {
		if "( WithResource )" {
			run kotlincode.coapSupport.updateResource(myself, "plasticBox/content", "plasticBox($bottles)")
		}
	}
	Goto idle

	State idle {}
	Transition t0
		whenMsg unload -> dump
		whenRequest canDump -> handleReq

	State dump {
		println("plasticBox | dump")
		onMsg(unload : unload(X)) {
			["
			val nb_dump = payloadArg(0).toInt()
			bottles += nb_dump
			"]
			if "( WithResource )" {
				run kotlincode.coapSupport.updateResource(myself, "plasticBox/content", "plasticBox($bottles)")
			}
		}
	}
	Goto idle

	State handleReq {
		println("plasticBox | handleReq")
		onMsg(canDump : canDump(X)) {
			["
			val nb_dump = payloadArg(0).toInt()
			acceptDump = (nb_dump <= (NPB - bottles))
			"]
		}
		if "(acceptDump)" {replyTo canDump with dumpAccept : dumpAccept(X)}
		else {replyTo canDump with dumpFull : dumpFull(X)}
	}
	Goto idle
}
