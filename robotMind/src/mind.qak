/*
 * This is a textual representation a model expressed using the Qak language (metamodel)
 * that describes the structure, interaction, behaviour of the software system
 * according to the requirements
 */

System robotmind

Dispatch step	: step(T)  // req-step
Dispatch stop	: stop(X)  // req-stop
Dispatch cmd 	: cmd(X)   // req-cmd

Context ctxMind	ip [ host= "localhost"   port= 8023 ]
ExternalContext ctxBasicRobot  ip [ host= "10.201.116.57"   port= 8020 ]

ExternalQActor basicrobot context ctxBasicRobot 

QActor robotmind context ctxMind {
	["var StepTime = 0L;"]

	State s0 initial {
		println("init")
	}
	Goto idle
	
	State idle {
		println("idle")
	}
	Transition tWork
		whenMsg step -> sStep
		whenMsg cmd -> sHandleCmd

	/*
	 * REQUIREMENT: req-cmd
	 */
	State sHandleCmd {
		println("sHandleCmd")
		onMsg (cmd : cmd(X)) {
			forward basicrobot -m cmd : cmd(X)
		}
	}
	Goto idle
	
	/*
	 * REQUIREMENT: req-step
	 */
	State sStep {
		println("sStep")
		onMsg (step : step(T)){
			["StepTime = payloadArg(0).toLong()"]
			forward basicrobot -m cmd : cmd(w)
		}
	}
	Transition tStop
		whenTimeVar StepTime -> sEndStep
		whenMsg stop -> sEndStep

	/*
	 * REQUIREMENT: req-stop
	 */
	State sEndStep {
		println("sEndStep")
		forward basicrobot -m cmd : cmd(h)
	}
	Goto idle
	
}
